# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from udm_project_control/direct_kin_serviceRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class direct_kin_serviceRequest(genpy.Message):
  _md5sum = "0ac105e93453c286dcab72f28e6e6370"
  _type = "udm_project_control/direct_kin_serviceRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """std_msgs/Float32 joint1
std_msgs/Float32 joint2
std_msgs/Float32 joint3
std_msgs/Float32 joint4

================================================================================
MSG: std_msgs/Float32
float32 data"""
  __slots__ = ['joint1','joint2','joint3','joint4']
  _slot_types = ['std_msgs/Float32','std_msgs/Float32','std_msgs/Float32','std_msgs/Float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       joint1,joint2,joint3,joint4

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(direct_kin_serviceRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.joint1 is None:
        self.joint1 = std_msgs.msg.Float32()
      if self.joint2 is None:
        self.joint2 = std_msgs.msg.Float32()
      if self.joint3 is None:
        self.joint3 = std_msgs.msg.Float32()
      if self.joint4 is None:
        self.joint4 = std_msgs.msg.Float32()
    else:
      self.joint1 = std_msgs.msg.Float32()
      self.joint2 = std_msgs.msg.Float32()
      self.joint3 = std_msgs.msg.Float32()
      self.joint4 = std_msgs.msg.Float32()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_4f().pack(_x.joint1.data, _x.joint2.data, _x.joint3.data, _x.joint4.data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.joint1 is None:
        self.joint1 = std_msgs.msg.Float32()
      if self.joint2 is None:
        self.joint2 = std_msgs.msg.Float32()
      if self.joint3 is None:
        self.joint3 = std_msgs.msg.Float32()
      if self.joint4 is None:
        self.joint4 = std_msgs.msg.Float32()
      end = 0
      _x = self
      start = end
      end += 16
      (_x.joint1.data, _x.joint2.data, _x.joint3.data, _x.joint4.data,) = _get_struct_4f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_4f().pack(_x.joint1.data, _x.joint2.data, _x.joint3.data, _x.joint4.data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.joint1 is None:
        self.joint1 = std_msgs.msg.Float32()
      if self.joint2 is None:
        self.joint2 = std_msgs.msg.Float32()
      if self.joint3 is None:
        self.joint3 = std_msgs.msg.Float32()
      if self.joint4 is None:
        self.joint4 = std_msgs.msg.Float32()
      end = 0
      _x = self
      start = end
      end += 16
      (_x.joint1.data, _x.joint2.data, _x.joint3.data, _x.joint4.data,) = _get_struct_4f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4f = None
def _get_struct_4f():
    global _struct_4f
    if _struct_4f is None:
        _struct_4f = struct.Struct("<4f")
    return _struct_4f
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from udm_project_control/direct_kin_serviceResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class direct_kin_serviceResponse(genpy.Message):
  _md5sum = "057c61f79df9f5c97bcb1eb29387225f"
  _type = "udm_project_control/direct_kin_serviceResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """std_msgs/Bool res
std_msgs/String message


================================================================================
MSG: std_msgs/Bool
bool data
================================================================================
MSG: std_msgs/String
string data
"""
  __slots__ = ['res','message']
  _slot_types = ['std_msgs/Bool','std_msgs/String']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       res,message

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(direct_kin_serviceResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.res is None:
        self.res = std_msgs.msg.Bool()
      if self.message is None:
        self.message = std_msgs.msg.String()
    else:
      self.res = std_msgs.msg.Bool()
      self.message = std_msgs.msg.String()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.res.data
      buff.write(_get_struct_B().pack(_x))
      _x = self.message.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.res is None:
        self.res = std_msgs.msg.Bool()
      if self.message is None:
        self.message = std_msgs.msg.String()
      end = 0
      start = end
      end += 1
      (self.res.data,) = _get_struct_B().unpack(str[start:end])
      self.res.data = bool(self.res.data)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.message.data = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.message.data = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.res.data
      buff.write(_get_struct_B().pack(_x))
      _x = self.message.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.res is None:
        self.res = std_msgs.msg.Bool()
      if self.message is None:
        self.message = std_msgs.msg.String()
      end = 0
      start = end
      end += 1
      (self.res.data,) = _get_struct_B().unpack(str[start:end])
      self.res.data = bool(self.res.data)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.message.data = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.message.data = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
class direct_kin_service(object):
  _type          = 'udm_project_control/direct_kin_service'
  _md5sum = '1acd9209c4cce540936eabd556b67827'
  _request_class  = direct_kin_serviceRequest
  _response_class = direct_kin_serviceResponse
