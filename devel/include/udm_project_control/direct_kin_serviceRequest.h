// Generated by gencpp from file udm_project_control/direct_kin_serviceRequest.msg
// DO NOT EDIT!


#ifndef UDM_PROJECT_CONTROL_MESSAGE_DIRECT_KIN_SERVICEREQUEST_H
#define UDM_PROJECT_CONTROL_MESSAGE_DIRECT_KIN_SERVICEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>

namespace udm_project_control
{
template <class ContainerAllocator>
struct direct_kin_serviceRequest_
{
  typedef direct_kin_serviceRequest_<ContainerAllocator> Type;

  direct_kin_serviceRequest_()
    : joint1()
    , joint2()
    , joint3()
    , joint4()  {
    }
  direct_kin_serviceRequest_(const ContainerAllocator& _alloc)
    : joint1(_alloc)
    , joint2(_alloc)
    , joint3(_alloc)
    , joint4(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Float32_<ContainerAllocator>  _joint1_type;
  _joint1_type joint1;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _joint2_type;
  _joint2_type joint2;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _joint3_type;
  _joint3_type joint3;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _joint4_type;
  _joint4_type joint4;





  typedef boost::shared_ptr< ::udm_project_control::direct_kin_serviceRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::udm_project_control::direct_kin_serviceRequest_<ContainerAllocator> const> ConstPtr;

}; // struct direct_kin_serviceRequest_

typedef ::udm_project_control::direct_kin_serviceRequest_<std::allocator<void> > direct_kin_serviceRequest;

typedef boost::shared_ptr< ::udm_project_control::direct_kin_serviceRequest > direct_kin_serviceRequestPtr;
typedef boost::shared_ptr< ::udm_project_control::direct_kin_serviceRequest const> direct_kin_serviceRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::udm_project_control::direct_kin_serviceRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::udm_project_control::direct_kin_serviceRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::udm_project_control::direct_kin_serviceRequest_<ContainerAllocator1> & lhs, const ::udm_project_control::direct_kin_serviceRequest_<ContainerAllocator2> & rhs)
{
  return lhs.joint1 == rhs.joint1 &&
    lhs.joint2 == rhs.joint2 &&
    lhs.joint3 == rhs.joint3 &&
    lhs.joint4 == rhs.joint4;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::udm_project_control::direct_kin_serviceRequest_<ContainerAllocator1> & lhs, const ::udm_project_control::direct_kin_serviceRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace udm_project_control

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::udm_project_control::direct_kin_serviceRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::udm_project_control::direct_kin_serviceRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::udm_project_control::direct_kin_serviceRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::udm_project_control::direct_kin_serviceRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::udm_project_control::direct_kin_serviceRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::udm_project_control::direct_kin_serviceRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::udm_project_control::direct_kin_serviceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0ac105e93453c286dcab72f28e6e6370";
  }

  static const char* value(const ::udm_project_control::direct_kin_serviceRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0ac105e93453c286ULL;
  static const uint64_t static_value2 = 0xdcab72f28e6e6370ULL;
};

template<class ContainerAllocator>
struct DataType< ::udm_project_control::direct_kin_serviceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "udm_project_control/direct_kin_serviceRequest";
  }

  static const char* value(const ::udm_project_control::direct_kin_serviceRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::udm_project_control::direct_kin_serviceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Float32 joint1\n"
"std_msgs/Float32 joint2\n"
"std_msgs/Float32 joint3\n"
"std_msgs/Float32 joint4\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Float32\n"
"float32 data\n"
;
  }

  static const char* value(const ::udm_project_control::direct_kin_serviceRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::udm_project_control::direct_kin_serviceRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.joint1);
      stream.next(m.joint2);
      stream.next(m.joint3);
      stream.next(m.joint4);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct direct_kin_serviceRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::udm_project_control::direct_kin_serviceRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::udm_project_control::direct_kin_serviceRequest_<ContainerAllocator>& v)
  {
    s << indent << "joint1: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.joint1);
    s << indent << "joint2: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.joint2);
    s << indent << "joint3: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.joint3);
    s << indent << "joint4: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.joint4);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UDM_PROJECT_CONTROL_MESSAGE_DIRECT_KIN_SERVICEREQUEST_H
